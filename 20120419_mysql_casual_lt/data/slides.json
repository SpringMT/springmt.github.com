var import_slides = 
[
  {'slide' : '<article><h1 id="railsmysql">「RailsとMysql」</h1><ul>  <li>2012/04/19</li>  <li>@Spring_MT</li></ul></article>'},
  {'slide' : '<article><h1 id="section">自己紹介</h1><ul>  <li>    <p>twitter_id : <strong>@Spring_MT</strong> <br /><image style="height: 200px" src="images/tiwtter_logo.jpg" /></p>  </li>  <li>    <p>今は福岡の10xlabでインフラ&amp;アプリ開発をしてます。</p>  </li></ul></article>'},
  {'slide' : '<article><h1 id="rails">今Railsを使って開発しています。</h1><ul>  <li>Railsのバージョンは3.2.2</li>  <li>DBにはもちろんMysqlを使っています。</li>  <li>ローカルのマシン(MBA)に、mysqld_multiを使ってmasterとslaveを立ててます    <ul>      <li><a href="http://spring-mt.tumblr.com/post/18485897722/mac-osx-replication">Mac OSXでカジュアルにreplicationしてみる</a></li>    </ul>  </li></ul></article>'},
  {'slide' : '<article><h1 id="railsmysql">RailsでどうやってMysqlを操作しているか一通りみてみました。</h1></article>'},
  {'slide' : '<article><h1 id="section">大枠で下記3つについてお話します。</h1><ol>  <li>Railsのモデルの構成</li>  <li>connection貼る</li>  <li>queryを投げる</li>  <li>トランザクション</li></ol></article>'},
  {'slide' : '<article><h1 id="rails">Railsのモデルの構成</h1></article>'},
  {'slide' : '<article><h2 id="section">図が入ります</h2></article>'},
  {'slide' : '<article><h1 id="connection">connection貼る</h1></article>'},
  {'slide' : '<article><h3 id="connection">connection貼る時のコード</h3><pre><code>conn = ActiveRecord::Base.mysql2_connection(<br/>  :adapter  =&amp;gt; &amp;#39;mysql2&amp;#39;,<br/>  :encoding =&amp;gt; &amp;quot;utf8&amp;quot;,<br/>  :reconnect =&amp;gt; &amp;quot;false&amp;quot;,                                                                                                                        <br/>  :username =&amp;gt; &amp;#39;root&amp;#39;,<br/>  :password =&amp;gt; &amp;#39;&amp;#39;,<br/>  :database =&amp;gt; &amp;#39;user&amp;#39;,<br/>  :socket   =&amp;gt; &amp;#39;/tmp/mysql.sock&amp;#39;,<br/>)<br/></code></pre><p>これで、mysqlとコネクションが貼れます。</p></article>'},
  {'slide' : '<article><h2 id="section">実際にやってること</h2><ol>  <li>Mysql2::Client.new(config)でC APIの<strong>mysql_real_connect</strong>を使って接続します。</li>  <li><strong>“SET SQL_AUTO_IS_NULL=0, NAMES ‘utf8’, @@wait_timeout = wail_time”</strong>を打ちます。<br />(NAMESはencodingを設定していると追加されます。wait_timeout)</li></ol></article>'},
  {'slide' : '<article><h2 id="set-sqlautoisnull0">SET SQL_AUTO_IS_NULL=0</h2><ul>  <li>AUTO_INCREMENTを使ってると、insertを打った直後の特定のselectで挙動がおかしくなります。</li>  <li>大規模だと、AUTO_INCREMENTってほとんど使わないので、打たないケースもあるかもです。</li></ul></article>'},
  {'slide' : '<article><pre><code>CREATE TABLE Test (<br/> `ID` int(11) NOT NULL AUTO_INCREMENT,<br/> `Name` char(35) NOT NULL DEFAULT &amp;#39;&amp;#39;,<br/>  PRIMARY KEY (`ID`)<br/>) ENGINE=InnoDB;<br/>INSERT INTO Test (Name) VALUES (&amp;#39;test&amp;#39;);<br/>SELECT * FROM Test WHERE ID IS NULL;<br/><br/>SET SQL_AUTO_IS_NULL=0の場合<br/>Empty set (0.00 sec)<br/><br/>SET SQL_AUTO_IS_NULL=1の場合<br/>+----+------+<br/>| ID | Name |<br/>+----+------+<br/>|  4 | test |<br/>+----+------+<br/>1 row in set (0.00 sec)<br/></code></pre></article>'},
  {'slide' : '<article><h1 id="query">query実行</h1></article>'},
  {'slide' : '<article><h3 id="prepare">prepareがない</h3><ul>  <li>以前mysq-casualのadvent calenderの@tagomorisさんのエントリにもありましたが、mysql2にはprepareはありません &gt;_&lt;  </li>  <li>ActiveRecordにもありません  </li>  <li>なので、直接SQLを発行する場合は、自前で値をエスケープして、SQL文を作成する必要があります。</li></ul></article>'},
  {'slide' : '<article><h3 id="prepare">prepareがない</h3><p>エスケープは下記のようにします。</p><pre><code>string = &amp;quot;あいう&amp;#39;;えお&amp;quot;<br/>array =  [&amp;quot;name=&amp;#39;%s&amp;#39; and group_id=&amp;#39;%s&amp;#39;&amp;quot;, &amp;quot;foo&amp;#39;bar&amp;quot;, 4]<br/>hash  =  { :name =&amp;gt; &amp;quot;foo&amp;#39;bar&amp;quot;, :group_id =&amp;gt; 4 }<br/><br/>puts Test.sanitize(string)<br/>puts Test.send(:sanitize_sql, hash)<br/>puts Test.send(:sanitize_sql, array)<br/><br/># 実行結果<br/>&amp;#39;あいう\&amp;#39;;えお&amp;#39;<br/>name=&amp;#39;foo\&amp;#39;bar&amp;#39; and group_id=&amp;#39;4&amp;#39;<br/>`City`.`name` = &amp;#39;foo\&amp;#39;bar&amp;#39; AND `City`.`group_id` = 4<br/><br/>(TestはActiveRecord::Baseを継承したクラス)<br/></code></pre></article>'},
  {'slide' : '<article><h3 id="query">query実行</h3><ul>  <li>ORMがあーだこーだして、sqlを組み立てた後、最終的に行き着くと、executeメソッドが呼ばれます。</li></ul><pre><code>conn.execute(sql)  <br/>conn.execute(&amp;#39;SELECT * FROM City;&amp;#39;)  <br/></code></pre><ul>  <li>query実行では、Mysql2経由でC APIのmysql_send_query経由でsqlを実行します</li></ul></article>'},
  {'slide' : '<article><h3 id="mysqlsendquery">mysql_send_query</h3><ul>  <li>    <p>mysql_send_queryを使っているのは、ノンブロッキングでsqlを実行するためです<br />(mysql_real_queryを使うと、結果が帰ってくるまで待っちゃいます。)</p>  </li>  <li>    <p>ただし、Railsでmysqlを使っている場合は、ノンブロッキングで実行するオプションはありません <br />(自分は見つけられませんでした &gt;_&lt;)</p>  </li>  <li>    <p>DBD-mysqlだと、4.019で同じようなことをしています。</p>  </li></ul></article>'},
  {'slide' : '<article><h3 id="mysqlsendquery">mysql_send_queryのソース</h3><ul>  <li>sql-common/client.c</li></ul><pre><code>int STDCALL<br/>mysql_send_query(MYSQL* mysql, const char* query, ulong length)<br/>{<br/>  DBUG_ENTER(&amp;quot;mysql_send_query&amp;quot;);<br/>  DBUG_RETURN(simple_command(mysql, COM_QUERY, (uchar*) query, length, 1));<br/>}<br/><br/><br/>int STDCALL<br/>mysql_real_query(MYSQL *mysql, const char *query, ulong length)<br/>{<br/>  DBUG_ENTER(&amp;quot;mysql_real_query&amp;quot;);                                                                                                      <br/>  DBUG_PRINT(&amp;quot;enter&amp;quot;,(&amp;quot;handle: 0x%lx&amp;quot;, (long) mysql));<br/>  DBUG_PRINT(&amp;quot;query&amp;quot;,(&amp;quot;Query = &amp;#39;%-.4096s&amp;#39;&amp;quot;,query));<br/><br/>  if (mysql_send_query(mysql,query,length))<br/>    DBUG_RETURN(1);<br/>  DBUG_RETURN((int) (*mysql-&amp;gt;methods-&amp;gt;read_query_result)(mysql));<br/>}<br/></code></pre></article>'},
  {'slide' : '<article><h3 id="sql">sqlを自前で実行する</h3><ul>  <li>下記みたいな感じになります。</li></ul><pre><code>columns = &amp;quot;*&amp;quot;<br/>table_name = Test.table_name<br/>where = Test.send(:sanitize_sql, {CountryCode: &amp;quot;USA&amp;quot;})<br/>sql = &amp;quot;SELECT #{columns} FROM #{table_name} WHERE #{where}&amp;quot;<br/>@res = obj.connection.execute(sql)  <br/><br/>@res.map { |f| hogehogeする} # fetchrow_hashref<br/></code></pre></article>'},
  {'slide' : '<article><h1 id="transaction">transactionについて</h1></article>'},
  {'slide' : '<article><h3 id="transaction">transactionについて</h3><pre><code>Test.transaction(:requires_new =&amp;gt; true) do<br/>  # 処理<br/>end<br/></code></pre><ul>  <li>↓の用になります。</li></ul><pre><code>BEGIN<br/>#処理<br/>COMMIT or ROLLBACK<br/></code></pre></article>'},
  {'slide' : '<article><h3 id="transaction">transactionのネスト</h3><ul>  <li>トランザクションのネストをすると、SAVEPOINTが打たれます。~~~Test.transaction(:requires_new =&gt; true) do<br/># 処理 A<br/>Test.transaction(:requires_new =&gt; true) do<br/>   # 処理 B<br/>end<br/>end<br/>~~~</li></ul><p>↓</p><pre><code>BEGIN<br/>処理 A<br/>SAVEPOINT active_record_1<br/>処理 B<br/>RELEASE SAVEPOINT active_record_1 or ROLLBACK active_record_1<br/>COMMIT or ROLLBACK<br/></code></pre><ul>  <li>トランザクションのネストの使いどころがちょっと想像できないですが、こんな風になります。</li></ul></article>'},
  {'slide' : '<article><h3 id="transaction">transactionについて</h3><ul>  <li>RailsはXA トランザクションには対応してないです。</li></ul></article>'},
  {'slide' : '<article><h3 id="db-masterslave">複数DB master、slaveの構成</h3><ul>  <li>ここは、railsのおはなしになっちゃうのでしません</li></ul></article>'},
  {'slide' : '<article><h1 id="section">ここまでは前フリで・・・</h1></article>'},
  {'slide' : '<article><h2 id="mysql-casual">福岡でもmysql casualを開催しようかと目論どります。</h2></article>'},
  {'slide' : '<article><h2 id="atnd">一応人数はそれなりに集まりそうなので、場所とか決まったら、atnd立てます。</h2><p>## 5月中旬を予定しています。</p></article>'},
]
